@page "/"
@inject BlazorServerUI.Services.IApiService ApiService
@inject ILogger<Home> Logger
@rendermode InteractiveServer
@using System.Text.Json

<h2>Blazor Server Home Page</h2>
<p>Welcome to the Blazor Server application. Use the buttons below to interact with the API and see the results.</p>

<div>
    <h3>API Interactions</h3>
    <p>Click the buttons below to fetch data from the API or send data to the API.</p>
    <!-- Button to fetch data from the API -->
    <button @onclick="GetApiData">Get API Data</button>
    <!-- Button to send data to the API -->
    <button @onclick="PostApiData">Post API Data</button>
</div>

@if (isLoading)
{
    <!-- Display loading message while data is being fetched or sent -->
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <!-- Display error message if an error occurred -->
    <p style="color: red;">@errorMessage</p>
}
else if (apiResponse != null)
{
    <div>
        <h3>API Response</h3>
        <!-- Display the API response -->
        <pre>@apiResponse</pre>
    </div>
}

@code {
    // Variable to store the API response
    private string? apiResponse;
    // Flag to indicate if a request is in progress
    private bool isLoading = false;
    // Variable to store error messages
    private string? errorMessage;

    // Method to fetch data from the API
    private async Task GetApiData()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            Logger.LogInformation("Fetching data from the API...");
            // Call the API service to get data
            var data = await ApiService.GetApiDataAsync();
            // Serialize the data to JSON format for display
            apiResponse = JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true });
            Logger.LogInformation("Data fetched successfully.");
        }
        catch (Exception ex)
        {
            // Handle the error and set the error message
            errorMessage = $"An error occurred while fetching data: {ex.Message}";
            Logger.LogError(ex, "An error occurred while fetching data.");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Method to send data to the API
    private async Task PostApiData()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            Logger.LogInformation("Sending data to the API...");
            // Data to be sent to the API
            var data = "Hello from Blazor Server";
            // Call the API service to post data
            var response = await ApiService.PostApiDataAsync(data);
            // Serialize the response to JSON format for display
            apiResponse = JsonSerializer.Serialize(response, new JsonSerializerOptions { WriteIndented = true });
            Logger.LogInformation("Data sent successfully.");
        }
        catch (Exception ex)
        {
            // Handle the error and set the error message
            errorMessage = $"An error occurred while sending data: {ex.Message}";
            Logger.LogError(ex, "An error occurred while sending data.");
        }
        finally
        {
            isLoading = false;
        }
    }
}